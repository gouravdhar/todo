{"version":3,"sources":["components/Filters/index.js","components/TodoItem/index.js","mocked.js","App.js","serviceWorker.js","index.js"],"names":["Filters","props","todos","changeFilter","currentCategory","uniqueSetOfCategories","Set","map","todo","category","optionsJSX","forEach","push","key","value","className","onChange","event","target","handleChangeCategory","TodoItem","toggleIsCompleted","id","onClick","type","checked","isDone","readOnly","description","initialTodos","App","useState","setTodos","filteredTodos","setFilteredTodos","descriptionQuery","setDescriptionQuery","userName","setUserName","categoryQuery","setCategoryQuery","setCurrentCategory","a","axios","get","apiTodos","console","log","test","JSON","parse","data","useEffect","filterTodos","addUser","fetchData","length","uuidv4","tempTodos","currentTodo","find","bodyFormData","FormData","append","stringify","post","then","respnse","Response","allTodoItems","filter","TodoListJSX","e","placeholder","role","aria-label","addTodo","selectedCategory","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb28a13c.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Filters = (props) => {\n\n    const {todos, changeFilter, currentCategory} = props;\n\n    const uniqueSetOfCategories = new Set(todos.map(todo => todo.category));\n\n    let optionsJSX = [];\n\n    uniqueSetOfCategories.forEach((category) => {\n        optionsJSX.push(<option key={category} value={category}>{category}</option>);\n    });\n\n    const handleChangeCategory = event => {\n        changeFilter(event.target.value);\n    };\n\n    return (\n        <div className='App'>\n            <select onChange={(event) => handleChangeCategory(event)} value={currentCategory}>\n                {optionsJSX}\n            </select>\n        </div>\n    );\n};","import React from 'react';\n\nexport const TodoItem = (props) => {\n    const {todo, toggleIsCompleted} = props;\n    return (\n        <li key={todo.id} onClick={() => toggleIsCompleted(todo.id)}>\n            <input type='checkbox'\n                   checked={todo.isDone}\n                   readOnly\n            />\n            {/* {todo.isDone\n                ?\n                <strike>{todo.description + ' ' + todo.category}</strike>\n                :\n                todo.description + ' ' + todo.category} */}\n\n            {todo.isDone\n                ?\n                <strike>{todo.description}</strike>\n                :\n                todo.description}\n        </li>\n    );\n};","export const initialTodos = [\n    // {\n    //     id: 'ea47ca06-afcb-46ac-953b-d7211a5db98a',\n    //     description: 'Laundry',\n    //     category: 'Home',\n    //     isDone: false,\n    // },\n    // {\n    //     id: '520a8762-0d0c-4c07-a5a0-c05701d740a1',\n    //     description: 'Make a presentation',\n    //     category: 'Office',\n    //     isDone: true,\n    // },\n    // {\n    //     id: '520a8762-0d0c-4c07-a5a0-c05701d740a2',\n    //     description: 'Do the release`',\n    //     category: 'Office',\n    //     isDone: false,\n    // },\n];","import React, {useEffect, useState} from 'react';\nimport {Filters} from './components/Filters';\nimport {v4 as uuidv4} from 'uuid';\nimport {TodoItem} from './components/TodoItem';\nimport {initialTodos} from './mocked';\nimport axios from \"axios\";\nimport './App.css';\n\nconst App = () => {\n\n    const [todos, setTodos] = useState(initialTodos);\n    const [filteredTodos, setFilteredTodos] = useState(initialTodos);\n    const [descriptionQuery, setDescriptionQuery] = useState('');\n    const [userName, setUserName] = useState('');\n    const [categoryQuery, setCategoryQuery] = useState('Office');\n    const [currentCategory, setCurrentCategory] = useState('Office');\n\n    async function fetchData() {\n        let apiTodos = await axios.get('https://flask-qa-deploy-postgres.herokuapp.com/api/getNotes/' + userName);\n        console.log(apiTodos);\n        // let test = JSON.parse('[{ \"id\": \"ea47ca06-afcb-46ac-953b-d7211a5db98a\", \"description\": \"Laundary\", \"category\": \"Home\", \"isDone\": false },{ \"id\": \"520a8762-0d0c-4c07-a5a0-c05701d740a1\", \"description\": \"Make a presentation\", \"category\": \"Office\", \"isDone\": true }, { \"id\": \"520a8762-0d0c-4c07-a5a0-c05701d740a2\", \"description\": \"Do the release\", \"category\": \"Office\", \"isDone\": false } ]')\n        let test = JSON.parse(apiTodos.data);\n        console.log(test);\n        if(test !== 'not okay'){\n            setTodos(test);\n        }\n        \n      }\n\n      \n\n    useEffect(() => {\n        \n        \n       \n        // filterTodos(test, 'Office')\n        // JSONParser parser = new JSONParser();\n        // JSONArray json = (JSONArray) parser.parse(stringToParse);\n        setFilteredTodos(filterTodos(todos, currentCategory));\n    }, [currentCategory, todos]);\n    // }, []);\n\n    const addTodo = () => {\n        if (descriptionQuery.length > 0 && categoryQuery.length > 0) {\n            setDescriptionQuery('');\n            setTodos([...todos, {id: uuidv4(), description: descriptionQuery, category: categoryQuery, isDone: false}]);\n            filterTodos(todos, currentCategory)\n            var bodyFormData = new FormData();\n            bodyFormData.append('username', userName);\n            bodyFormData.append('notes', JSON.stringify([...todos, {id: uuidv4(), description: descriptionQuery, category: categoryQuery, isDone: false}]));\n            axios.post('https://flask-qa-deploy-postgres.herokuapp.com/api/postNotes',  bodyFormData).then(respnse => Response.JSON);\n        }\n    };\n\n    const addUser = () => {\n        fetchData();\n        if (userName.length > 0) {\n            setTodos([...todos, {id: uuidv4(), description: descriptionQuery, category: categoryQuery, isDone: false}]);\n            setUserName(userName);\n        }\n    };\n\n    const toggleIsCompleted = (id) => {\n        const tempTodos = [...todos];\n        const currentTodo = tempTodos.find(todo => todo.id === id);\n        currentTodo.isDone = !currentTodo.isDone;\n        var bodyFormData = new FormData();\n        bodyFormData.append('username', userName);\n        bodyFormData.append('notes', JSON.stringify(tempTodos));\n        axios.post('https://flask-qa-deploy-postgres.herokuapp.com/api/postNotes',  bodyFormData).then(respnse => Response.JSON);\n        setTodos(tempTodos);\n    };\n\n\n    const changeFilter = (selectedCategory) => {\n        setCurrentCategory(selectedCategory);\n    };\n\n    const filterTodos = (allTodoItems, currentCategory) => {\n        return allTodoItems.filter(todo => todo.category === currentCategory);\n    };\n\n    const TodoListJSX = filteredTodos.map(todo =>\n        <TodoItem\n            key={todo.id}\n            todo={todo}\n            toggleIsCompleted={toggleIsCompleted}\n        />);\n\n    return (\n        <div className='App'>\n            <section className='column'>\n                <h1>Todo</h1>\n                <div className='add-user'>\n                <input value={userName} onChange={e => setUserName(e.target.value)} placeholder='User Name'/>\n                    {/* <input value={categoryQuery} onChange={e => setCategoryQuery(e.target.value)}/> */}\n                    <span role=\"img\" aria-label=\"+\" className='plus' onClick={() => addUser()}> <button>Search User</button></span>\n                </div>\n                \n                <ul>{TodoListJSX}</ul>\n                <div className='add-item'>\n                    <input value={descriptionQuery} onChange={e => setDescriptionQuery(e.target.value)} placeholder='add a task...'/>\n                    <input value={categoryQuery} onChange={e => setCategoryQuery(e.target.value)}/>\n                    <span role=\"img\" aria-label=\"+\" className='plus' onClick={() => addTodo()}> ➕</span>\n                </div>\n            </section>\n            <section className='column'>\n                <Filters\n                    todos={todos}\n                    changeFilter={changeFilter}\n                    currentCategory={currentCategory}\n                />\n            </section>\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}